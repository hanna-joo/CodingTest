# 쉬운 최단거리 (s1, 37.623%)
# source : https://www.acmicpc.net/problem/14940
# keyword : dfs/bfs
# return : 지도의 모든 지점에서 목표 지점까지의 거리 출력

"""
1. 문제
- 지도의 모든 지점에서 목표 지점까지의 거리 출력
    - 도달할 수 없는 위치는 -1 출력
- 이동 방향은 상하좌우

2. 입력 및 제한
- 지도 세로와 가로 n, m (2<=n,m<=1,000)
- 지도 정보 : 벽(0), 길(1), 목표지점(2)

3. 로직
- 거리 행렬 기본값 -1
    - 도달불가(-1), 벽(0), 목표지점(0), 도달가능(거리)
- 지도 받을 때 0인 점 바로 거리 0으로 변경
    - 0인데 탐색 못한 점의 경우 -1로 남을 수 있기 때문
"""

import sys
input = sys.stdin.readline

n, m = map(int, input().split())
dist = [[-1 for _ in range(m)] for _ in range(n)]
move = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# 목표 지점 찾기
ground = []
for i in range(n):
    row = input().split()
    for j in range(m):
        if row[j] == '2':
            start = (i, j)
            dist[i][j] = 0
        if row[j] == '0':
            dist[i][j] = 0
    ground.append(row)


def bfs(start):
    q = [(start[0], start[1], 0)]
    while q:
        cy, cx, d = q.pop(0)
        for dy, dx in move:
            ny, nx = cy+dy, cx+dx
            if 0<=ny<n and 0<=nx<m:
                if ground[ny][nx] == '0':
                    continue
                if dist[ny][nx] != -1:
                    continue
                dist[ny][nx] = d+1
                q.append((ny, nx, d+1))
    

bfs(start)
print('\n'.join(' '.join(map(str, dist[i])) for i in range(n)))


"""
테스트 케이스

3 3
2 0 1
1 0 0
1 1 1
---
0 0 -1
1 0 0
2 3 4

15 15
2 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
1 1 1 1 1 1 1 1 1 1 0 0 0 0 0
1 1 1 1 1 1 1 1 1 1 0 1 1 1 1
1 1 1 1 1 1 1 1 1 1 0 1 0 0 0
1 1 1 1 1 1 1 1 1 1 0 1 1 1 1
---
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
4 5 6 7 8 9 10 11 12 13 14 15 16 17 18
5 6 7 8 9 10 11 12 13 14 15 16 17 18 19
6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
7 8 9 10 11 12 13 14 15 16 17 18 19 20 21
8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
10 11 12 13 14 15 16 17 18 19 20 21 22 23 24
11 12 13 14 15 16 17 18 19 20 0 0 0 0 0
12 13 14 15 16 17 18 19 20 21 0 -1 -1 -1 -1
13 14 15 16 17 18 19 20 21 22 0 -1 0 0 0
14 15 16 17 18 19 20 21 22 23 0 -1 -1 -1 -1
"""